{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Python Cloudscale.ch A cloudscale.ch API client for Python3 and your command line. Install pip3 install -U cloudscale --user export PATH = $PATH : $HOME /.local/bin cloudscale-cli --version Source The Source is availabe on gh/cloudscale-ch/python-cloudscale .","title":"Home"},{"location":"#python-cloudscalech","text":"A cloudscale.ch API client for Python3 and your command line.","title":"Python Cloudscale.ch"},{"location":"#install","text":"pip3 install -U cloudscale --user export PATH = $PATH : $HOME /.local/bin cloudscale-cli --version","title":"Install"},{"location":"#source","text":"The Source is availabe on gh/cloudscale-ch/python-cloudscale .","title":"Source"},{"location":"cli/","text":"Command Line Interface Help See all options: $ cloudscale-cli Usage: cloudscale-cli [ OPTIONS ] COMMAND [ ARGS ] ... Options: --version Show the version and exit. -a, --api-token TEXT API token. -p, --profile TEXT Profile used in config file. --debug Enables debug log output. -o, --output [ table | json ] Output format. [ default: table ] -h, --help Show this message and exit. Commands: flavor floating-ip image network objects-user region server server-group subnet volume Autocompletion zsh: eval \" $( _CLOUDSCALE_CLI_COMPLETE = source_zsh cloudscale-cli ) \" bash: eval \" $( _CLOUDSCALE_CLI_COMPLETE = source cloudscale-cli ) \" Authentication Evironment variable Using the ENV CLOUDSCALE_API_TOKEN variable: export CLOUDSCALE_API_TOKEN = <your token> cloudscale-cli flavor list Command line argument Passing the --api-token parameter: cloudscale-cli --api-token <your_token> server create ... Config file Creating an ini file .cloudscale.ini (leading dot) in your $HOME or a cloudscale.ini (without leading dot) in the CWD with the following schema: [default] api_token = <token> The default profile taken if available is default . The profile can be chosen by passing --profile or CLOUDSCALE_PROFILE ENV variable. export CLOUDSCALE_PROFILE = staging [production] api_token = <token> [staging] api_token = <token> Passing the command line option will overwrite the ENV var as one would expect: cloudscale-cli --profile production server list Usage Examples Create Servers Create one server: cloudscale-cli server create \\ --name my-server \\ --flavor flex-2 \\ --image centos-7 \\ --ssh-key \" $( cat ~/.ssh/id_rsa.pub ) \" Create up to 10 servers in a row with --desired-amount : cloudscale-cli server create \\ --name my-server \\ --flavor flex-2 \\ --image centos-7 \\ --ssh-key \" $( cat ~/.ssh/id_rsa.pub ) \" \\ --desired-amount 10 List Servers Get a list as table view: cloudscale-cli server list Get a list as JSON response: cloudscale-cli -o json server list List Servers and Filter by Tag List servers having the tag project with value gemini: cloudscale-cli server list --filter-tag project = gemini List servers having a tag project: cloudscale-cli server list --filter-tag project List Servers and Filter by JSON Query Get a list of stopped servers: cloudscale-cli server list --filter-json '[?status == `stopped`]' Get a list of stopped servers having tag project=demo and start them after accepting: cloudscale-cli server list \\ --filter-tag project = demo \\ --filter-json '[?status == `stopped`]' \\ --action start ... Do you want to start? [ y/N ] : Start a list of stopped servers after accepting having tag project=demo : cloudscale-cli server list \\ --filter-tag project = demo \\ --filter-json '[?status == `stopped`]' \\ --action start ... Do you want to start? [ y/N ] : Delete a list of stopped servers after accepting having tag project=demo : cloudscale-cli server list \\ --filter-tag project = demo \\ --filter-json '[?status == `stopped`]' \\ --delete ... Do you want to delete? [ y/N ] : Get a simplified custom JSON list of stopped servers in profile production : cloudscale-cli \\ --output json \\ --profile production \\ server list \\ --filter-json '[?status == `stopped`].{\"server_name\": name, \"zone\": zone.slug, \"image\": image.slug, \"flavor\": flavor.slug}' [ { \"flavor\" : \"flex-8\" , \"image\" : \"rhel-7\" , \"server_name\" : \"server1\" , \"zone\" : \"rma1\" } , { \"flavor\" : \"flex-8\" , \"image\" : \"centos-7\" , \"server_name\" : \"server2\" , \"zone\" : \"rma1\" } ] Working with Tags Add/Update servers tags (but keep all existing with different keys): cloudscale-cli server update <uuid> --tag project = apollo --tag stage = prod Delete a server tag (but keep all others existing): cloudscale-cli server update <uuid> --clear-tag status Add/Update server tags and remove a specific tag key: cloudscale-cli server update <uuid> \\ --tag project = apollo --tag stage = prod --clear-tag status Add/Update server tags, remove other tags: cloudscale-cli server update <uuid> \\ --tag project = apollo --tag stage = prod --clear-all-tags Server Actions Stop a server: cloudscale-cli server stop <uuid> Start a server: cloudscale-cli server start <uuid> Delete a server after accepting: cloudscale-cli server delete <uuid> Just delete without questions asked: cloudscale-cli server delete -f <uuid> Verbosity and Debugging Increase the verbosity by changing the log level from its default value ERROR to the value INFO : cloudscale-cli --debug server list or alternatively export CLOUDSCALE_DEBUG = 1 cloudscale-cli server list To set the default log level e.g. to DEBUG use the CLOUDSCALE_LOG_LEVEL environment variable: export CLOUDSCALE_LOG_LEVEL = debug cloudscale-cli server list","title":"CLI"},{"location":"cli/#command-line-interface","text":"","title":"Command Line Interface"},{"location":"cli/#help","text":"See all options: $ cloudscale-cli Usage: cloudscale-cli [ OPTIONS ] COMMAND [ ARGS ] ... Options: --version Show the version and exit. -a, --api-token TEXT API token. -p, --profile TEXT Profile used in config file. --debug Enables debug log output. -o, --output [ table | json ] Output format. [ default: table ] -h, --help Show this message and exit. Commands: flavor floating-ip image network objects-user region server server-group subnet volume","title":"Help"},{"location":"cli/#autocompletion","text":"zsh: eval \" $( _CLOUDSCALE_CLI_COMPLETE = source_zsh cloudscale-cli ) \" bash: eval \" $( _CLOUDSCALE_CLI_COMPLETE = source cloudscale-cli ) \"","title":"Autocompletion"},{"location":"cli/#authentication","text":"","title":"Authentication"},{"location":"cli/#evironment-variable","text":"Using the ENV CLOUDSCALE_API_TOKEN variable: export CLOUDSCALE_API_TOKEN = <your token> cloudscale-cli flavor list","title":"Evironment variable"},{"location":"cli/#command-line-argument","text":"Passing the --api-token parameter: cloudscale-cli --api-token <your_token> server create ...","title":"Command line argument"},{"location":"cli/#config-file","text":"Creating an ini file .cloudscale.ini (leading dot) in your $HOME or a cloudscale.ini (without leading dot) in the CWD with the following schema: [default] api_token = <token> The default profile taken if available is default . The profile can be chosen by passing --profile or CLOUDSCALE_PROFILE ENV variable. export CLOUDSCALE_PROFILE = staging [production] api_token = <token> [staging] api_token = <token> Passing the command line option will overwrite the ENV var as one would expect: cloudscale-cli --profile production server list","title":"Config file"},{"location":"cli/#usage-examples","text":"","title":"Usage Examples"},{"location":"cli/#create-servers","text":"Create one server: cloudscale-cli server create \\ --name my-server \\ --flavor flex-2 \\ --image centos-7 \\ --ssh-key \" $( cat ~/.ssh/id_rsa.pub ) \" Create up to 10 servers in a row with --desired-amount : cloudscale-cli server create \\ --name my-server \\ --flavor flex-2 \\ --image centos-7 \\ --ssh-key \" $( cat ~/.ssh/id_rsa.pub ) \" \\ --desired-amount 10","title":"Create Servers"},{"location":"cli/#list-servers","text":"Get a list as table view: cloudscale-cli server list Get a list as JSON response: cloudscale-cli -o json server list","title":"List Servers"},{"location":"cli/#list-servers-and-filter-by-tag","text":"List servers having the tag project with value gemini: cloudscale-cli server list --filter-tag project = gemini List servers having a tag project: cloudscale-cli server list --filter-tag project","title":"List Servers and Filter by Tag"},{"location":"cli/#list-servers-and-filter-by-json-query","text":"Get a list of stopped servers: cloudscale-cli server list --filter-json '[?status == `stopped`]' Get a list of stopped servers having tag project=demo and start them after accepting: cloudscale-cli server list \\ --filter-tag project = demo \\ --filter-json '[?status == `stopped`]' \\ --action start ... Do you want to start? [ y/N ] : Start a list of stopped servers after accepting having tag project=demo : cloudscale-cli server list \\ --filter-tag project = demo \\ --filter-json '[?status == `stopped`]' \\ --action start ... Do you want to start? [ y/N ] : Delete a list of stopped servers after accepting having tag project=demo : cloudscale-cli server list \\ --filter-tag project = demo \\ --filter-json '[?status == `stopped`]' \\ --delete ... Do you want to delete? [ y/N ] : Get a simplified custom JSON list of stopped servers in profile production : cloudscale-cli \\ --output json \\ --profile production \\ server list \\ --filter-json '[?status == `stopped`].{\"server_name\": name, \"zone\": zone.slug, \"image\": image.slug, \"flavor\": flavor.slug}' [ { \"flavor\" : \"flex-8\" , \"image\" : \"rhel-7\" , \"server_name\" : \"server1\" , \"zone\" : \"rma1\" } , { \"flavor\" : \"flex-8\" , \"image\" : \"centos-7\" , \"server_name\" : \"server2\" , \"zone\" : \"rma1\" } ]","title":"List Servers and Filter by JSON Query"},{"location":"cli/#working-with-tags","text":"Add/Update servers tags (but keep all existing with different keys): cloudscale-cli server update <uuid> --tag project = apollo --tag stage = prod Delete a server tag (but keep all others existing): cloudscale-cli server update <uuid> --clear-tag status Add/Update server tags and remove a specific tag key: cloudscale-cli server update <uuid> \\ --tag project = apollo --tag stage = prod --clear-tag status Add/Update server tags, remove other tags: cloudscale-cli server update <uuid> \\ --tag project = apollo --tag stage = prod --clear-all-tags","title":"Working with Tags"},{"location":"cli/#server-actions","text":"Stop a server: cloudscale-cli server stop <uuid> Start a server: cloudscale-cli server start <uuid> Delete a server after accepting: cloudscale-cli server delete <uuid> Just delete without questions asked: cloudscale-cli server delete -f <uuid>","title":"Server Actions"},{"location":"cli/#verbosity-and-debugging","text":"Increase the verbosity by changing the log level from its default value ERROR to the value INFO : cloudscale-cli --debug server list or alternatively export CLOUDSCALE_DEBUG = 1 cloudscale-cli server list To set the default log level e.g. to DEBUG use the CLOUDSCALE_LOG_LEVEL environment variable: export CLOUDSCALE_LOG_LEVEL = debug cloudscale-cli server list","title":"Verbosity and Debugging"},{"location":"library/","text":"Example Usage in Python3 Hint: Use th CLI to get impression of the structure in JSON: cloudscale-cli -o json ... List the slug of all flavors import os from cloudscale import Cloudscale , CloudscaleApiException api_token = os . getenv ( 'CLOUDSCALE_API_TOKEN' ) cloudscale = Cloudscale ( api_token = api_token ) flavors = cloudscale . flavor . get_all () for flavor in flavors : print ( flavor [ 'slug' ]) Listing import os from cloudscale import Cloudscale , CloudscaleApiException api_token = os . getenv ( 'CLOUDSCALE_API_TOKEN' ) cloudscale = Cloudscale ( api_token = api_token ) servers = cloudscale . server . get_all () for server in servers : if server [ 'status' ] == \"running\" : print ( server [ 'name' ]) Use of filter_tag without value import os from cloudscale import Cloudscale , CloudscaleApiException api_token = os . getenv ( 'CLOUDSCALE_API_TOKEN' ) cloudscale = Cloudscale ( api_token = api_token ) servers = cloudscale . server . get_all ( filter_tag = 'project' ) for server in servers : print ( server [ 'name' ]) Use of filter_tag with value import os from cloudscale import Cloudscale , CloudscaleApiException api_token = os . getenv ( 'CLOUDSCALE_API_TOKEN' ) cloudscale = Cloudscale ( api_token = api_token ) servers = cloudscale . server . get_all ( filter_tag = 'project=apollo' ) for server in servers : print ( server [ 'name' ]) Get resource by UUID import os from cloudscale import Cloudscale , CloudscaleApiException api_token = os . getenv ( 'CLOUDSCALE_API_TOKEN' ) try : cloudscale = Cloudscale ( api_token = api_token ) server_group = cloudscale . server_group . get_by_uuid ( uuid = \"5a1e5b28-d354-47a8-bfb2-01b048c20204\" ) print ( server_group [ 'name' ]) except CloudscaleApiException as e : print ( e ) Error handling import os from cloudscale import Cloudscale , CloudscaleApiException api_token = os . getenv ( 'CLOUDSCALE_API_TOKEN' ) try : cloudscale = Cloudscale ( api_token = api_token ) server = cloudscale . server . get_by_uuid ( uuid = \"does-not-exist\" ) print ( server [ 'name' ]) except CloudscaleApiException as e : # Prints \"API Response Error (404): Not found.\" print ( e ) # Prints \"404\" print ( e . status_code ) # Prints raw API response print ( e . response )","title":"Library"},{"location":"library/#example-usage-in-python3","text":"Hint: Use th CLI to get impression of the structure in JSON: cloudscale-cli -o json ...","title":"Example Usage in Python3"},{"location":"library/#list-the-slug-of-all-flavors","text":"import os from cloudscale import Cloudscale , CloudscaleApiException api_token = os . getenv ( 'CLOUDSCALE_API_TOKEN' ) cloudscale = Cloudscale ( api_token = api_token ) flavors = cloudscale . flavor . get_all () for flavor in flavors : print ( flavor [ 'slug' ])","title":"List the slug of all flavors"},{"location":"library/#listing","text":"import os from cloudscale import Cloudscale , CloudscaleApiException api_token = os . getenv ( 'CLOUDSCALE_API_TOKEN' ) cloudscale = Cloudscale ( api_token = api_token ) servers = cloudscale . server . get_all () for server in servers : if server [ 'status' ] == \"running\" : print ( server [ 'name' ])","title":"Listing"},{"location":"library/#use-of-filter_tag-without-value","text":"import os from cloudscale import Cloudscale , CloudscaleApiException api_token = os . getenv ( 'CLOUDSCALE_API_TOKEN' ) cloudscale = Cloudscale ( api_token = api_token ) servers = cloudscale . server . get_all ( filter_tag = 'project' ) for server in servers : print ( server [ 'name' ])","title":"Use of filter_tag without value"},{"location":"library/#use-of-filter_tag-with-value","text":"import os from cloudscale import Cloudscale , CloudscaleApiException api_token = os . getenv ( 'CLOUDSCALE_API_TOKEN' ) cloudscale = Cloudscale ( api_token = api_token ) servers = cloudscale . server . get_all ( filter_tag = 'project=apollo' ) for server in servers : print ( server [ 'name' ])","title":"Use of filter_tag with value"},{"location":"library/#get-resource-by-uuid","text":"import os from cloudscale import Cloudscale , CloudscaleApiException api_token = os . getenv ( 'CLOUDSCALE_API_TOKEN' ) try : cloudscale = Cloudscale ( api_token = api_token ) server_group = cloudscale . server_group . get_by_uuid ( uuid = \"5a1e5b28-d354-47a8-bfb2-01b048c20204\" ) print ( server_group [ 'name' ]) except CloudscaleApiException as e : print ( e )","title":"Get resource by UUID"},{"location":"library/#error-handling","text":"import os from cloudscale import Cloudscale , CloudscaleApiException api_token = os . getenv ( 'CLOUDSCALE_API_TOKEN' ) try : cloudscale = Cloudscale ( api_token = api_token ) server = cloudscale . server . get_by_uuid ( uuid = \"does-not-exist\" ) print ( server [ 'name' ]) except CloudscaleApiException as e : # Prints \"API Response Error (404): Not found.\" print ( e ) # Prints \"404\" print ( e . status_code ) # Prints raw API response print ( e . response )","title":"Error handling"}]}